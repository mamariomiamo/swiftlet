<launch>
    <!-- MAVROS posix SITL environment launch script -->
    <!-- launches Gazebo environment and MAVROS, PX4 SITL, and spawns vehicle -->
    <!-- vehicle model and world -->
    <arg name="est" default="ekf2" />
    <arg name="vehicle" default="iris" />
    <arg name="world" default="$(find mavlink_sitl_gazebo)/worlds/empty.world" />
    <!-- gazebo configs -->
    <arg name="gui" default="false" />
    <arg name="debug" default="false" />
    <arg name="verbose" default="false" />
    <arg name="paused" default="false" />
    <arg name="gcs" default="udp://@127.0.0.1" />

    <!-- Gazebo sim -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="gui" value="$(arg gui)" />
        <arg name="world_name" value="$(arg world)" />
        <arg name="debug" value="$(arg debug)" />
        <arg name="verbose" value="$(arg verbose)" />
        <arg name="paused" value="$(arg paused)" />
        <arg name="use_sim_time" value="false" />
    </include>

    <!-- drone0 -->
    <group ns="drone0">
        <!-- MAVROS and vehicle configs -->
        <!-- position in NWU -->
        <arg name="ID" value="0" />
        <arg name="fcu_url" default="udp://:14540@localhost:14580" />
        <arg name="xid" value="drone0" />
        <arg name="x" value="-20" />
        <arg name="y" value="0" />
        <arg name="z" value="0" />


        <!-- PX4 SITL and vehicle spawn -->
        <!-- enu frame -->
        <include file="$(find px4)/launch/single_vehicle_spawn.launch">
            <arg name="x" value="$(arg x)" />
            <arg name="y" value="$(arg y)" />
            <arg name="z" value="$(arg z)" />
            <arg name="R" value="0" />
            <arg name="P" value="0" />
            <arg name="Y" value="1.5708" />
            <arg name="vehicle" value="$(arg vehicle)" />
            <arg name="mavlink_udp_port" value="14560" />
            <arg name="mavlink_tcp_port" value="4560" />
            <arg name="ID" value="$(arg ID)" />
            <!-- <arg name="gst_udp_port" value="$(eval 5600 + arg('ID'))"/> -->
            <!-- <arg name="video_uri" value="$(eval 5600 + arg('ID'))"/> -->
            <!-- <arg name="mavlink_cam_udp_port" value="$(eval 14530 + arg('ID'))"/> -->
        </include>

        <!-- Mavros -->
        <include file="$(find mavros)/launch/px4.launch">
            <arg name="fcu_url" value="$(arg fcu_url)" />
            <arg name="gcs_url" value="$(arg gcs)" />
            <arg name="tgt_system" value="$(eval 1 + arg('ID'))" />
            <arg name="tgt_component" value="1" />
        </include>
        
        <!-- PX4 offboard control -->
        <node pkg="px4ctrl" type="px4ctrl" name="px4_ctrl" output="screen">
            <param name="uav_id" value="$(arg xid)" />
        </node>
        
        <!-- static transform between drone local frame to global map/world frame -->
        <node pkg="tf2_ros"
            type="static_transform_publisher"
            name="global_to_local"
            args="$(arg x) $(arg y) $(arg z) 0.0 0.0 -0.7071068 0.7071068 /map /drone0_local_enu_origin" />
        <!-- rotation part should be kept the same since it described the rotation from nwu to enu -->

        <!-- local pcl sensing -->
        <include file="$(find local_pcl)/launch/local_sensing.launch"></include>

    </group>

    <!-- <node type="rviz" name="rviz" pkg="rviz" args="-d $(find mockamap)/config/mockamap.rviz" /> -->
    <node type="rviz" name="rviz" pkg="rviz" args="-d $(find swiftlet)/config/swiftlet.rviz"
        output="screen" />

    <node pkg="tf2_ros" type="static_transform_publisher" name="map_to_world"
        args="0.0 0.0 0.0 0.0 0.0 0.0 1.0 /map /world" />


    <!-- mockamap -->
    <!-- <include file="$(find swiftlet)/launch/swiftlet_mockamap.launch"></include> -->
    <include file="$(find swiftlet)/launch/map_gen.launch"></include>

</launch>